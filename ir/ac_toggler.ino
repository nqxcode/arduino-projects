#include <Wire.h>
#include <SPI.h>
#include <Adafruit_BME280.h>
#include <IRremote.h>
#include <avr/pgmspace.h>

#define minTemperature 24.0 // case when AC turn off
#define maxTemperature 24.5 // Thermal stress, AC turn on

bool AC_ON = false;
bool AC_OFF = false;

Adafruit_BME280 bme;

IRsend irsend;
int khz = 38;
const unsigned int signal_turn_on[] PROGMEM = {3492, 1740, 492, 380, 440, 1304, 440, 432, 440, 432, 440, 432, 440, 432, 444, 428, 440, 432, 440, 432, 440, 432, 440, 428, 444, 432, 440, 432, 440, 1304, 440, 428, 444, 432, 440, 432, 440, 428, 496, 376, 444, 432, 440, 432, 440, 1300, 444, 1300, 444, 1300, 444, 428, 444, 428, 444, 1300, 444, 428, 444, 428, 496, 376, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 496, 376, 444, 428, 444, 428, 444, 428, 444, 428, 496, 376, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 440, 432, 444, 1300, 444, 1300, 440, 432, 440, 432, 440, 432, 444, 428, 444, 428, 444, 10020, 3496, 1736, 444, 428, 444, 1300, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 492, 380, 444, 428, 440, 432, 444, 428, 444, 428, 444, 428, 444, 1300, 444, 428, 440, 432, 444, 428, 444, 428, 440, 432, 440, 432, 444, 428, 440, 1304, 440, 1304, 440, 1304, 440, 432, 440, 432, 440, 1304, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 428, 444, 432, 440, 432, 440, 432, 440, 428, 444, 428, 444, 432, 492, 1248, 444, 428, 496, 1248, 444, 1300, 448, 1296, 444, 1300, 444, 428, 444, 428, 444, 428, 444, 432, 440, 428, 444, 428, 444, 1300, 444, 1300, 444, 428, 444, 428, 444, 428, 496, 376, 444, 428, 444, 428, 444, 428, 444, 428, 496, 376, 444, 1300, 444, 1300, 444, 428, 444, 428, 444, 428, 444, 1300, 492, 1252, 444, 1300, 444, 428, 444, 428, 444, 1300, 444, 1300, 444, 428, 444, 428, 444, 428, 440, 432, 440, 432, 444, 428, 440, 432, 440, 432, 440, 432, 492, 380, 440, 432, 440, 432, 440, 428, 444, 428, 444, 1304, 440, 1304, 440, 1300, 444, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 428, 444, 428, 444, 428, 496, 1248, 444, 1304, 440, 1300, 444, 428, 444, 428, 444, 428, 444, 428, 444, 432, 492, 376, 496, 376, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 1300, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 1300, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 444, 428, 496, 376, 444, 428, 444, 428, 444, 428, 496, 376, 444, 428, 488, 384, 444, 428, 444, 1300, 440, 432, 492, 380, 440, 1304, 444, 1300, 440, 432, 492, 1252, 440, 1304, 440};
const unsigned int signal_turn_off[] PROGMEM = {3548, 1688, 492, 380, 440, 1300, 444, 428, 496, 376, 444, 432, 440, 428, 444, 428, 444, 428, 496, 380, 492, 380, 440, 432, 440, 432, 440, 428, 444, 1304, 492, 380, 492, 376, 440, 432, 440, 432, 496, 376, 440, 432, 440, 432, 440, 1304, 492, 1252, 496, 1252, 436, 432, 496, 376, 440, 1304, 440, 432, 440, 432, 492, 380, 492, 380, 492, 380, 440, 432, 440, 460, 412, 432, 440, 432, 492, 380, 440, 432, 440, 432, 440, 432, 444, 428, 440, 432, 440, 432, 492, 380, 440, 432, 492, 380, 492, 380, 440, 432, 440, 432, 440, 432, 492, 380, 492, 380, 492, 380, 492, 380, 440, 432, 440, 432, 440, 432, 440, 1300, 444, 1300, 444, 432, 440, 432, 440, 432, 440, 428, 476, 400, 440, 10024, 3544, 1688, 440, 432, 440, 1304, 440, 432, 492, 380, 492, 408, 464, 384, 488, 376, 444, 456, 416, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 1300, 444, 432, 492, 380, 492, 376, 444, 432, 492, 380, 492, 376, 444, 432, 440, 1300, 484, 1260, 496, 1248, 496, 376, 444, 432, 436, 1308, 436, 432, 492, 380, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 496, 376, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 1304, 440, 1304, 440, 1304, 440, 1304, 492, 380, 492, 380, 440, 432, 440, 432, 440, 432, 440, 432, 492, 1252, 492, 1252, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 492, 380, 492, 1252, 440, 1300, 496, 380, 492, 380, 440, 428, 444, 1304, 440, 1304, 492, 1248, 444, 432, 440, 432, 440, 1300, 496, 1248, 492, 380, 444, 428, 440, 436, 488, 380, 496, 376, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 436, 488, 1252, 440, 1304, 440, 1304, 440, 432, 492, 380, 440, 432, 496, 380, 496, 372, 492, 380, 492, 380, 440, 432, 440, 432, 492, 1252, 440, 1304, 440, 1304, 440, 432, 440, 432, 440, 432, 492, 380, 492, 380, 492, 380, 440, 432, 440, 432, 440, 432, 468, 404, 492, 380, 440, 432, 440, 432, 440, 432, 440, 432, 440, 432, 440, 1304, 440, 432, 440, 432, 440, 432, 464, 404, 496, 380, 440, 432, 492, 1252, 492, 376, 444, 428, 444, 432, 440, 432, 440, 428, 496, 376, 496, 376, 444, 432, 440, 432, 440, 432, 488, 380, 496, 380, 492, 376, 496, 376, 440, 432, 440, 432, 492, 380, 440, 436, 436, 432, 492, 1252, 444, 1300, 440, 432, 440, 1304, 440, 1304, 440};

void setup() {
  bme.begin(0x76);
  delay(100);

  Serial.begin(9600);
}

void loop() {
  float temperature = bme.readTemperature();

  Serial.print("Temperature: ");
  Serial.println(temperature);

  toggleAcPower(temperature);

  delay(5000);
}

void toggleAcPower(float temperature)
{
  if (temperature <= minTemperature) {
    if (AC_OFF == false) {
      turnOffAC();
      AC_OFF = true;
      AC_ON = false;
      return;
    }
  }

  if (temperature >= maxTemperature) {
    if (AC_ON == false) {
      turnOnAC();
      AC_ON = true;
      AC_OFF = false;
      return;
    }
  }
}

void turnOnAC() {
  int size = sizeof(signal_turn_on) / sizeof(int);
  unsigned int buffer[size];

  for (int i = 0; i < size; i++) {
    buffer[i] = pgm_read_dword(&signal_turn_on[i]);
  }

  irsend.sendRaw(buffer, size, khz);
  Serial.println("ON AC");
}

void turnOffAC() {
  int size = sizeof(signal_turn_off) / sizeof(int);
  unsigned int buffer[size];

  for (int i = 0; i < size; i++) {
    buffer[i] = pgm_read_dword(&signal_turn_off[i]);
  }

  irsend.sendRaw(buffer, size, khz);
  Serial.println("OFF AC");
}

